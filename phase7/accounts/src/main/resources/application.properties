# SPring Data JPA
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.h2.console.enabled=true
spring.jpa.show-sql=true
spring.jpa.defer-datasource-initialization=true

# Port Configuration for Web Access
server.port=8080

# Pointing to the name of service you're configuring
spring.application.name=accounts
# Select the environment profile
spring.profiles.active=prod
# Fetch from the configserver service running on port 8071
spring.config.import=optional:configserver:http://localhost:8071
# optional: indicates that is config server is down, you should still start up accounts service

# This tells Spring to expose all Actuator endpoint urls - this allows /refresh to be exposed
management.endpoints.web.exposure.include=*

## Configuring info endpoint
info.app.name=Accounts Microservice
info.app.description=Bank Accounts Application
info.app.version=1.0.0

# In the case that the IP address for this container changes
eureka.instance.preferIpAddress = true 
# Go ahead and register with Eureka
eureka.client.registerWithEureka = true
# Fetch all registry details
eureka.client.fetchRegistry = true
eureka.client.serviceUrl.defaultZone = http://localhost:8070/eureka/

# Send this info to be viewable by Actuator
resilience4j.circuitbreaker.configs.default.registerHealthIndicator= true
# Monitor a minimum of 5 requests to determine whether to keep it open (default is 50)
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.minimumNumberOfCalls= 5
# Threshold to consider to open circuit (if 50% of calls fail, open the alternative circuit)
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.failureRateThreshold= 50
# Property that tells how much time circuit breaker has to wait in order to decide to half-open the circuit (30 seconds, default it 60)
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.waitDurationInOpenState= 30000
# When circuit breaker is in half-open state, allow only 2 requests (if both are succsessful, clsoe alternative circuit)
resilience4j.circuitbreaker.instances.detailsForCustomerSupportApp.permittedNumberOfCallsInHalfOpenState=2

# Lets Resilience4j register with the actuator
resilience4j.ratelimiter.configs.default.registerHealthIndicator= true
# How much time the thread has to wait before it can request before the limiter accepts a new request
resilience4j.ratelimiter.instances.sayHello.timeoutDuration=5000
resilience4j.ratelimiter.instances.sayHello.limitRefreshPeriod=5000
# Will accept only 1 request during refresh period
resilience4j.ratelimiter.instances.sayHello.limitForPeriod=1

# By default, for performance issues, Sleuth will send only 10% of the logs to Zipkin
# Here we set it to 100% (if you want 50% you write 0.5)
spring.sleuth.sampler.percentage=1
# This is the endpoint to send the logs 
spring.zipkin.baseUrl=http://localhost:9411/

spring.zipkin.sender.type=rabbit
spring.zipkin.rabbitmq.queue=zipkin
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest